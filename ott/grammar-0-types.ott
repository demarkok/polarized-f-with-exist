embed {{ tex-preamble

\usepackage{esvect}


% https://tex.stackexchange.com/questions/33401/a-version-of-colorbox-that-works-inside-math-environments
\setlength{\fboxsep}{1pt}
\newcommand{\ngbox}[1]{\mathchoice%
  {\colorbox{black!8}{$\displaystyle      \mathit{ #1 } $} }%
  {\colorbox{black!8}{$\textstyle         \mathit{ #1 } $} }%
  {\colorbox{black!8}{$\scriptstyle       \mathit{ #1 } $} }%
  {\colorbox{black!8}{$\scriptscriptstyle \mathit{ #1 } $} } }%

}}

metavar a {{ tex \alpha }}, b {{ tex \beta }}, g {{ tex \gamma }}, d {{tex \delta}}, 
 α {{ tex \alpha }}, β {{ tex \beta }},
 γ {{ tex \gamma }},  δ {{ tex \delta }} ::= {{ com type variables }}

indexvar n , m, i , j ::= {{ com index variables }}



% System F
grammar 

as {{ tex \vv{\alpha}  }},
bs {{ tex \vv{\beta} }}
:: 'as_' ::= {{ com systemf type variable list }}
   | ·                   ::   :: empty   {{ com empty list }}
   | a                   ::   :: Var      {{ com a variable }}
   | </ asi // , // i /> ::   :: concat   {{ com concatenate lists }}

fs {{ tex \sigma }}, 
fσ {{ tex \sigma }}
:: 'fs_' ::= {{ com systemf substitution }}
   | ·                    ::   :: Empty
   | fA / a               ::   :: Sub
   | fAs / as             ::   :: Subs 
   | ( fσ )               :: S :: paren
   | | σ |                ::   :: depolarize
   | </ fsi // , // i />  ::   :: concat  {{ com concatenate }}

fTs {{ tex \vv{T} }},
fAs {{ tex \vv{A} }},
fBs {{ tex \vv{B} }}
:: 'fTs_' ::= {{ com list of systemf types }}
   | ·                    ::   :: empty   {{ com empty list }}
   | fT                   ::   :: Single  {{ com a type }}
   | </ fTi // , // i />  ::   :: concat  {{ com concatenate }}

fT {{ tex T }}, fA {{ tex A }}, fB {{ tex B}} :: 'fT_' ::= {{ com System F types }}
   | a         :: :: Var
   | fT1 → fT2   :: :: Fun
   | ∀ as . fT  :: :: Forall
   | [ fσ ] fT  :: M :: Sub  
   | ( fT )     :: S :: Paren

grammar
fG {{ tex \Theta }}, fΔ {{ tex \Theta }}, fΓ {{ tex \Theta }} :: F_Ctxt ::= {{ com systemF type context }}
    | ·                   ::   :: empty   {{ com empty context }}
    | as                  ::   :: vars    {{ com variables }}
    | </ fGi // , // i /> ::   :: concat  {{ com concatenate contexts }}


grammar
coh {{ tex n }}, mcoh {{ tex m }} :: 'n_' ::= {{ com cohort index }}
    | Z     :: :: Zero {{ tex 0 }}
    | S coh :: :: Succ {{ tex [[coh]]+1 }}


grammar

pa {{ tex \mathcolor{positive}{ \alpha^{+} } }},
pb {{ tex \mathcolor{positive}{ \beta^{+} } }},
pc {{ tex \mathcolor{positive}{ \gamma^{+} }  }},
pd {{ tex \mathcolor{positive}{ \delta^{+} } }} 
:: 'pa_' ::= {{ com Positive variable }}
   | a ⁺       :: :: Var    {{ tex \mathcolor{positive}{ [[a]]^{+} } }}
   | pnb       :: :: PNVar


na {{ tex \mathcolor{negative}{ \alpha^{-} } }},
nb {{ tex \mathcolor{negative}{ \beta^{-} } }},
nc {{ tex \mathcolor{negative}{ \gamma^{-} } }},
nd {{ tex \mathcolor{negative}{ \delta^{-} } }}
:: 'na_' ::= {{ com negative variable }}
   | a ⁻       :: :: Var {{ tex \mathcolor{negative}{ [[a]]^{-} } }}
   | pna       :: :: PNVar

pna {{ tex \alpha^{\pm} }},
pnb {{ tex \beta^{\pm} }}
:: 'pna_' ::= {{ com Positive or negative variable }}
   | a ±       :: :: Var {{ tex [[a]]^{\pm} }}
   | a ± : coh :: :: VarCoh {{ tex [[a]]^{\pm [[coh]] } }}



grammar

s {{ tex \sigma }}, σ {{ tex \sigma }}  :: 's_' ::= {{ com substitution }}
   | ·                    ::   :: Empty
   | id                   ::   :: Id {{ tex \mathsf{id} }}
   | P / pa               ::   :: PosSub
   | N / na               ::   :: NegSub
   | iPs / pas            ::   :: PosSubs 
   | iNs / nas            ::   :: NegSubs
   | nas / nuas           ::   :: NegFromUSubs
   | Sub μ                ::   :: FromMoving {{ tex [[μ]] }}
   | σ1 ○ σ2              ::   :: Compose
   | σ1 <=< σ2            ::   :: ComposeM
   | ordVars1 / ordVars2  ::   :: VarSubs
   | ( σ )                :: S :: paren
   | </ si // , // i />   ::   :: concat  {{ com concatenate }}

scE {{ tex e }} :: 'scE_' ::= {{ com Constraint Entry }}
   | pua :≈ iP            ::   :: PEq 
   | nua :≈ iN            ::   :: NEq
   | pua :≥ iP            ::   :: Sup 
   | pua :≥* iP           ::   :: MSup {{tex \vv{[[pua]] [[:≥]] [[iP]]}  }}
   | ( scE )              :: S :: paren
   | SC ( nua )           :: M :: NSelect

scEF {{ tex e }} :: 'scEF_' ::= {{ com Constraint Entry (Full) }}
   | pua :≈ uP            ::   :: PEq 
   | nua :≈ uN            ::   :: UNEq
   | pua :≥ uP            ::   :: USup 
   | pua :≤ uP            ::   :: USub 
   | pua :≤* uP           ::   :: MUSub {{tex \vv{[[pua]] [[:≤]] [[uP]]}  }}
   | pua :≤ iP            ::   :: Sub 
   | pua :≤* iP           ::   :: MSub {{tex \vv{[[pua]] [[:≤]] [[iP]]}  }}
   | ( scEF )              :: S :: paren


ucE  {{ tex ue }} :: 'ucE_' ::= {{ com Unification Constraint Entry }}
   | pua :≈ iP            ::   :: PEq 
   | nua :≈ iN            ::   :: NEq 
   | ( ucE )              :: S :: paren


UC :: 'UC_' ::= {{ com unification constraint }}
   | ·                   ::   :: Empty
   | ucE                 ::   :: Entry
   | UC \ varset         ::   :: Exclude
   | UC | varset         ::   :: Restr
   | UC1 ∪ UC2           ::   :: Union
   | </ UCi // , // i /> ::   :: concat  {{ com concatenate }}
   | ( UC )              :: S :: paren

SC {{ tex C }} :: 'SC_' ::= {{ com subtyping constraint }}
   | ·                   ::   :: Empty
   | scE                 ::   :: Entry
   | scEF                ::   :: FullEntry
   | SC \ varset         ::   :: Exclude
   | SC | varset         ::   :: Restr
   | SC1 ∪ SC2           ::   :: Union
   | lift UC             ::   :: Lift    {{ tex [[UC]] }}
   | </ SCi // , // i /> ::   :: concat  {{ com concatenate }}
   | ( SC )              :: S :: paren

us {{ tex \widehat{\sigma} }}, uσ {{ tex \widehat{\sigma} }} :: 'us_' ::= {{ com unification substitution }}
   | ·                   ::   :: Empty
   | iP / pua            ::   :: PosSub
   | iN / nua            ::   :: NegSub
   | iPs / puas          ::   :: PosSubs 
   | iNs / nuas          ::   :: NegSubs
   | ( uσ )               :: S :: paren
   | uσ1 ○ uσ2           ::   :: Compose
   | </ uσi // , // i />  ::   :: concat  {{ com concatenate }}

grammar

aus {{ tex \widehat{\tau} }},
uτ {{ tex \widehat{\tau} }},
ausr {{ tex \widehat{\rho} }},
uρ {{ tex \widehat{\rho} }} :: 'aus_' ::= {{ com anti-unification substitution }}
   | ·                    ::   :: Empty
   | nua ↦ iN            ::   :: NSol  
   | nua ↦ uN            ::   :: NuSol
   | nas / nuas           ::   :: NegFromUSubs
   | iNs / nuas           ::   :: Neg
   | aus1 ∪ aus2          ::   :: Union
   | </ ausi // , // i /> ::   :: concat  {{ com concatenate }}
   | ( aus )              :: S :: paren

grammar

pas {{ tex \vv{ \mathcolor{positive}{ \alpha}^{+} } }},
pbs {{ tex \vv{ \mathcolor{positive}{ \beta}^{+}  } }},
pcs {{ tex \vv{ \mathcolor{positive}{ \gamma}^{+}  } }},
pds {{ tex \vv{ \mathcolor{positive}{ \delta}^{+}  } }}
:: 'pas_' ::= {{ com positive variable list }}
   | ·                    ::   :: empty   {{ com empty list }}
   | pa                   ::   :: Var     {{ com a variable }}
   | pa *                 ::   :: Vars    {{ com a variable }}
                                          {{ tex \vv{[[pa]]} }}

   | pa * ^ I               ::   :: VarsDom {{ tex \vv{[[pa]]}^{[[I]]} }}
   | </ pasi // , // i /> ::   :: concat  {{ com concatenate lists }}

nas {{ tex \vv{ \mathcolor{negative}{ \alpha^{-} } } }},
nbs {{ tex \vv{ \mathcolor{negative}{ \beta^{-} } } }},
ncs {{ tex \vv{ \mathcolor{negative}{ \gamma^{-} } } }},
nds {{ tex \vv{ \mathcolor{negative}{ \delta^{-} } } }}
:: 'nas_' ::= {{ com negative variables }}
   | ·                    ::   :: empty   {{ com empty list }}
   | na                   ::   :: Var     {{ com a variable }}
   | na *                 ::   :: Vars    {{ com variables }}
                                          {{ tex \vv{[[na]]} }}
   | </ nasi // , // i /> ::   :: concat  {{ com concatenate lists }}

pnas {{ tex \vv{ \alpha^{\pm} } }},
pnbs {{ tex \vv{ \beta^{\pm} } }},
pncs {{ tex \vv{ \gamma^{\pm} } }},
pnds {{ tex \vv{ \delta^{\pm} } }}
:: 'pnas_' ::= {{ com positive or negative variable list }}
   | ·                     ::   :: empty   {{ com empty list }}
   | pna                   ::   :: Var     {{ com a variable }}
   | pna *                 ::   :: Vars    {{ com variables }}
                                           {{ tex \vv{[[pna]]} }}
   | </ pnasi // , // i /> ::   :: concat  {{ com concatenate lists }}


iP {{ tex \mathcolor{positive}{P} }}, 
iQ {{ tex \mathcolor{positive}{Q} }}, 
iR {{ tex \mathcolor{positive}{R} }} :: 'iP_' ::= {{ com Positive declarative types }}
   | pa         ::   :: Var
   | ↓ iN       ::   :: Shift
   | ∃ nas . iP ::   :: Exists 
   | [ σ ]  iP  :: M :: AppSub  
   | [ aus ] uP :: M :: AppAUSub  
   | [ uσ ] uP  :: M :: AppUSub  
   | [ mu ] iP  :: M :: AppMoving 
   | ( iP )     :: S :: Paren
   | ConstT     :: M :: Const

ConstT :: 'ConstT_' ::= {{ com constant type }}
   | Int     :: :: Int
   | Bool    :: :: Bool
   | List iP :: :: List


ii {{ tex i }}, 
jj {{ tex j }} :: 'ii_' ::= {{ com index }}

SI,  SJ ::  'SI_' ::= 
   | { I } :: :: Unorder

I,  J :: 'I_' ::= 
   | ii                  :: :: Index
   | </ Ii // , // i />  ::   :: concat   {{ com concatenate lists }}
   | I \ SI              ::   :: exclude


l, m, k :: 'l_' ::=

ls :: 'ls_' ::=
   | ·                     ::   :: empty   {{ com empty list }}
   | l                     ::   :: lbl     {{ com a label }}
   | </ lsi // , // i />  ::   :: concat   {{ com concatenate lists }}

ql :: 'ql_' ::=
   | l ▷ pa                ::   :: lbl     {{ com a label }}
   | l ▷* pa               ::   :: lbls    {{ tex \vv{[[l]][[▷]][[pa]]} }}
   | ( l ▷* pa ) ^ I       ::   :: lblsDom {{ tex \vv{[[l]][[▷]][[pa]]}^{[[I]]} }}

%   | ⊫  :: :: VDash     {{ tex \mathcolor{\ccolor}{\VDash} }}
iN {{ tex \mathcolor{negative}{N} }}, 
iM {{ tex \mathcolor{negative}{M} }}, 
iK {{ tex \mathcolor{negative}{K} }} :: 'iN_' ::= {{ com Negative declarative types }}
   | na          ::   :: Var
   | ↑ iP        ::   :: Shift
   | iP → iN     ::   :: Fun
   | ∀ pas . iN  ::   :: Forall 
   | ∀ ql  . iN  :: M  :: LblForall
   | ∀ ( pa ≥* iP ) . iN  ::  M :: BForallLB  {{ tex [[∀]]\vv{[[pa]][[≥]][[iP]]}[[.]][[iN]] }}
   | ∀ ( pa ≤* iP ) . iN  ::  M :: BForallUB  {{ tex [[∀]]\vv{[[pa]][[≤]][[iP]]}[[.]][[iN]] }}
   | [ σ ] iN    :: M :: AppSub 
   | [ aus ] uN  :: M :: AppAUSub
   | [ mu ] iN   :: M :: AppMoving
   | [ uσ ] uN   :: M :: AppUSub  
   | ( iN )      :: S :: Paren


iPs {{ tex \vv{ \mathcolor{positive}{P} } }},
iQs {{ tex \vv{ \mathcolor{positive}{Q} } }}
:: 'iPs_' ::= {{ com list of positive types }}
   | ·                    ::   :: empty   {{ com empty list }}
   | iP                   ::   :: Var     {{ com a singel type }}
   | [ s ] iPs            :: M :: AppSub
   | iP1 , iP2            ::   :: concat  {{ com concatenate lists }}
   | ( iPs )              :: S :: paren

iNs {{ tex \vv{ \mathcolor{negative}{N} } }},
iMs {{ tex \vv{ \mathcolor{negative}{M} } }}
:: 'iNs_' ::= {{ com list of negative types }}
   | ·                    ::   :: empty   {{ com empty list }}
   | iN                   ::   :: Var     {{ com a singel type }}
   | [ s ] iNs            :: M :: AppSub
   | iN1 , iN2            ::   :: concat  {{ com concatenate lists }}
   | ( iNs )              :: S :: paren


grammar

G {{ tex \Theta }}, Δ {{ tex \Theta }}, Γ {{ tex \Theta }} :: DT_Ctxt ::= {{ com declarative type context }}
    | ·                  ::   :: empty   {{ com empty context }}
    | { pas }            ::   :: PList   {{ com list of variables }}
                                         {{ tex [[pas]] }}
    | { nas }            ::   :: NList   {{ com list of variables }}
                                         {{ tex [[nas]] }}         
    | { pnas }           ::   :: PNList  {{ com list of variables }}
    | ( G )              :: S :: paren
    | G , pas            :: M :: appendP {{ com append a list of variables }}
    | G , nas            :: M :: appendN {{ com append a list of variables }}
    | G , pnas           :: M :: appendPN {{ com append a list of variables }}
    | Γ1 ∪ Γ2            ::   :: union
    | Γ1 ∩ varset        ::   :: intersect
    | Γ1 , Γ2            ::   :: concat  {{ com concatenate contexts }}

grammar

T {{ tex \Xi }}, Θ {{ tex \Xi }}:: U_Ctxt ::= {{ com algorithmic variable context }}
    | ·                  ::   :: empty     {{ com empty context }}
    | ordVars [ Δ ]      ::   :: FromVList {{ com from an ordered list of variables }}
                                           {{ tex [[ordVars]] \{[[Δ]]\} }}
    | pua * [ Δ ]        ::   :: FromVarS  {{ com from a variable to a list }}
                                           {{ tex \vv{ [[pua]] \{[[Δ]]\} } }}
    | Θ1 , Θ2            ::   :: concat    {{ com concatenate contexts }}
    | ( Θ )              :: S :: paren
    | Θ | varset         ::   :: restr   {{ com leave only those variables that are in the set }}
                                         {{ tex [[Θ]]|_{[[varset]]} }}
    | Θ1 ∪ Θ2            ::   :: union
grammar

Xi {{ tex \widehat{\Theta} }}, Ξ {{ tex \widehat{\Theta} }} :: AU_Ctxt ::= {{ com anti-unification type variable context }}
    | ·                  ::   :: empty   {{ com empty context }}
    | { puas }           ::   :: PAUList {{ com list of positive variables }}
                                         {{ tex [[puas]] }}
    | { nuas }           ::   :: NAUList {{ com list of negative variables }}
                                         {{ tex [[nuas]] }}
    | Ξ , puas           :: M :: appendP {{ com append a list of variables }}
    | Ξ , nuas           :: M :: appendN {{ com append a list of variables }}
    | Ξ1 , Ξ2            ::   :: concat  {{ com concatenate contexts }}
    | ( Ξ )              :: S :: paren
    | Ξ1 ∪ Ξ2            ::   :: union
    | Ξ1 ∩ varset        ::   :: intersect

                                       % {{ com context containing only negative uvars }}

grammar
ordVars {{ tex \vv{ \alpha } }}, ordVarsb {{ tex \vv{ \beta } }} :: OrdVars ::= {{ com ordered positive or negative variables }}
    | ·                         ::   :: empty     {{ com empty list }}
    | pas                       ::   :: PList     {{ com list of variables }}
    | nas                       ::   :: NList     {{ com list of variables }}
    | pnas                      ::   :: PNList    {{ com list of variables }}
    | puas                      ::   :: PUList    {{ com list of variables }}
    | nuas                      ::   :: NUList    {{ com list of variables }}
    | ordVars1 \ varset         ::   :: Setminus  {{ com setminus }}
    |  varset                ::   :: fromset   {{ tex [[varset]] }}
    | </ ordVarsi // , // i />  ::   :: concat    {{ com concatenate contexts }}
    | ( ordVars )               :: S :: paren     {{ com parenthesis }}
    | [ mu ] ordVars            :: M :: moving    {{ com apply moving to list }}
    | [ umu ] ordVars           :: M :: umoving   {{ com apply umoving to list }}


grammar
varset {{ tex \textit{vars} }} :: Varset ::= {{ com set of variables }}
    | ∅                  ::   :: emptyset  {{ com empty set }}
    | varset1 ∩ varset2  ::   :: intersect {{ com set intersection }}
    | varset1 ∪ varset2  ::   :: union     {{ com set union }}
    | varset1 \ varset2  ::   :: setminus  {{ com set complement }}
    | ( varset )         :: S :: paren     {{ com parenthesis }}
    | { ordVars }        ::   :: OrdVars   {{ com ordered list of variables }}
                                           {{ tex [[ordVars]] }}
    | [ mu ] varset      :: M :: moving    {{ com ply moving to varset }}
    | Ξ                  ::   :: AU_Ctxt   {{ com algorithmic type context }}
    | Γ                  ::   :: DT_Ctxt   {{ com declarative type context }}

grammar
mu {{ tex \mu }}, μ {{ tex \mu }}:: Mu ::= 
    | ·                   ::   :: empty   {{ com empty moving }}
    | pma1 ↦ pma2         ::   :: Psingle {{ com Positive unit substitution }}
    | nma1 ↦ nma2         ::   :: Nsingle {{ com Positive unit substitution }}
    | mu1 ∪ mu2           :: M :: Union   {{ com Set-like union of movings }} 
    | mu1 ○ mu2           :: M :: Compose {{ com Composition }} 
    | </ mui // , // i /> ::   :: concat  {{ com concatenate movings }}
    | mu |_ varset        :: M :: restr   {{ com restriction on a set }} 
                                          {{ tex [[mu]]|_{[[varset]]}  }} 
    | mu -1               :: M :: inv     {{ com inversion }} 
                                          {{ tex [[mu]]^{-1} }} 

grammar
umu {{ tex \vv{\mu} }} :: UMu ::=
   | ·                    ::   :: empty    {{ com empty moving }}
   | puas / pas           ::   :: PosUSubs
   | nuas / nas           ::   :: NegUSubs

grammar

pnua {{ tex \widehat{ \mathcolor{negative}{\alpha} }^{\pm} }} :: pnua_ ::= {{ com positive/negative unification variable }}
    | a ̂ ±        :: :: Var {{ tex \widehat{[[a]]}^{\pm} }}
    %| a ̂ ± [ Δ ]  :: :: AnnotVar {{ tex \widehat{[[a]]}^{\pm}\{ [[Δ]] \} }}

pua {{ tex \widehat{\mathcolor{positive}{\alpha} }^{+} }} :: pua_ ::= {{ com positive unification variable }}
    | a ̂ ⁺        :: :: Var {{ tex \widehat{ \mathcolor{positive}{[[a]]} }^{+} }}
    | pua  [ Δ ]  :: :: AnnotVar {{ tex [[pua]]\{ [[Δ]] \} }}
    | pnua        :: :: PN

nua {{ tex \widehat{ \mathcolor{negative}{\alpha} }^{-} }},
nub {{ tex \widehat{ \mathcolor{negative}{\beta} }^{-} }}
:: nua_ ::= {{ com negative unification variable }}
    | a ̂ ⁻               :: :: Var {{ tex \widehat{ \mathcolor{negative}{[[a]]} }^{-} }}
    | a ̂ ⁻ _ { iN , iM } :: :: VarIdxd {{ tex \widehat{ \mathcolor{negative}{[[a]]} }^{-}_{\{ [[iN]], [[iM]] \} } }}
    | nua [ Δ ]          :: :: AnnotVar {{ tex [[nua]]\{ [[Δ]] \} }}
    | pnua               :: :: PN

puas {{ tex \vv{ \widehat{ \mathcolor{positive}{\alpha} }^{+} } }},
pubs {{ tex \vv{ \widehat{ \mathcolor{positive}{\beta} }^{+} } }}
:: 'puas_' ::= {{ com positive unification variable list }}
   | ·                     ::   :: empty    {{ com empty list }}
   | pua                   ::   :: Var      {{ com a variable }}
   | pua *                 ::   :: FromVar  {{ com from a normal variable, context unspecified }}
                                            {{ tex \vv{ [[pua]] } }}
   | </ puasi // , // i /> ::   :: concat   {{ com concatenate lists }}

nuas {{ tex \vv{ \widehat{ \mathcolor{negative}{\alpha} }^{-} } }},
nubs {{ tex \vv{ \widehat{ \mathcolor{negative}{\beta} }^{-} } }}
:: 'nuas_' ::= {{ com negative unification variable list }}
   | ·                     ::   :: empty    {{ com empty list }}
   | nua                   ::   :: Var      {{ com a variable }}
   | ToList Ξ              ::   :: Ctxt     {{ com from an antiunification context }}
                                            {{ tex [[Ξ]] }}
   | nua * [ Δ ]           ::   :: FromVarC {{ com from a normal variable }}
                                            {{ tex \vv{ [[nua]] \{[[Δ]]\} } }}
   | nua *                 ::   :: FromVar  {{ com from a normal variable, context unspecified }}
                                            {{ tex \vv{ [[nua]]  } }}
   | </ nuasi // , // i /> ::   :: concat   {{ com concatenate lists }}



uP {{ tex \ngbox{ \mathcolor{positive}{P} } }}, 
uQ {{ tex \ngbox{ \mathcolor{positive}{Q} } }}:: 'uP_' ::= {{ com Positive algorithmic type }}
                                                            {{ tex \ngbox{[[uP]]} }} 
   | pua           ::   :: UnifVar 
   | pa            ::   :: Var 
   | ↓ uN          ::   :: Shift
   | ∃ nas . uP    ::   :: Exists
   | [ s ] uP      :: M :: AppSub  
   | [ aus ] uP    :: M :: AppAUSub  
   | [ mu ] uP     :: M :: AppMoving 
   | [ uσ ] uP     :: M :: AppUSub  
   | [ umu ] iP    :: M :: AppAUNSub
   | ( uP )        :: S :: Paren

uN {{ tex \ngbox{ \mathcolor{negative}{N} } }}, 
uM {{ tex \ngbox{ \mathcolor{negative}{M} } }} :: 'uN_' ::= {{ com Negative algorithmic type }}
                                                             {{ tex \ngbox{[[uN]]} }}
   | nua            ::   :: UnifVar
   | na             ::   :: Var
   | ↑ uP           ::   :: Shift
   | uP → uN        ::   :: Fun
   | ∀ pas . uN     ::   :: Forall
   | ∀ ( pa ≥* iP ) . uN  ::  M :: BForallLB   {{ tex [[∀]]\vv{[[pa]][[≥]][[iP]]}[[.]][[uN]] }}
   | ∀ ( pa ≤* iP ) . uN  ::  M :: BForallUB  {{ tex [[∀]]\vv{[[pa]][[≤]][[iP]]}[[.]][[uN]] }}
   | [ s ] uN       :: M :: AppSub 
   | [ aus ] uN     :: M :: AppAUSub
   | [ mu ] uN      :: M :: AppMoving
   | [ uσ ] uN      :: M :: AppUSub
   | [ umu ] iN     :: M :: AppAUNSub
   | ( uN )         :: S :: Paren


auSol :: 'auSOL_' ::=
   | ( Ξ , uQ , aus1 , aus2 ) :: :: PSol
   | ( Ξ , uN , aus1 , aus2 ) :: :: NSol

terminals :: 'terminals_' ::=
  | ∃  :: :: exists    {{ tex \exists }}
  | .  :: :: dot       {{ tex .~ }}
  | ;  :: :: semi      {{ tex \mathbin{;} }}
  | ∀  :: :: forall    {{ tex \forall }}
  | ↑  :: :: upShift   {{ tex \mathord{\uparrow} }}
  | ↓  :: :: downShift {{ tex \mathord{\downarrow} }}
  | →  :: :: funArrow  {{ tex \rightarrow }}
  | ↔  :: :: bijArrow  {{ tex \leftrightarrow }}
  | ∊  :: :: inSet     {{ tex \in }}
  | ∉  :: :: notInSet  {{ tex \notin }}
  | ·  :: :: cDot      {{ tex \cdot }}
  | ⊢  :: :: vdash     {{ tex \vdash }}
  | ≤  :: :: subtype   {{ tex \leqslant }}
  | ≥  :: :: supertype {{ tex \geqslant }}
  | ≈  :: :: equiv     {{ tex \simeq }}
  | ∪  :: :: union     {{ tex \cup }}
  | ∩  :: :: intersect {{ tex \cap }}
  | \  :: :: setminus  {{ tex \setminus }}
  | ⊆  :: :: subset    {{ tex \subseteq }}
  | ↦  :: :: mapsto    {{ tex \mapsto }}
  | ≈u :: :: unify      {{ tex \overset{u}{\simeq} }}
  | ≈au :: :: antiunify {{ tex \overset{a}{\simeq} }}
  | ∅ :: :: empty      {{ tex \emptyset }}
  | ○ :: :: compose    {{ tex \circ }}
  | ⇒ :: :: implies    {{ tex \Rightarrow }}
  | ⇐ :: :: checks     {{ tex \Leftarrow }}
  | ⇔ :: :: synchecks     {{ tex \Leftrightarrow }}
  % | ≈a :: :: antiunify {{ tex \overset{g}{\simeq} }}
  | ⊨  :: :: vDash     {{ tex \vDash }}
  | ⫤  :: :: Dashv     {{ tex \Dashv }}
  % | ⊫  :: :: VDash     {{ tex \mathcolor{\ccolor}{\VDash} }}
  % | ⫥  :: :: DashV     {{ tex \mathcolor{\ccolor}{\DashV} }}
  | ≠  :: :: neq       {{ tex \neq }}
  % | ≡  :: :: equiv     {{ tex \mathcolor{\rcolor}{\equiv} }}
  | ≡n  :: :: equivn   {{ tex \equiv_{n} }}
  | ∨  :: :: LUB       {{ tex \vee }}
  | ⇓ :: :: norm       {{ tex \Downarrow }}
  | :≥ :: :: solGeq    {{ tex \mathbin{:\geqslant} }}
  | :≤ :: :: solLeq    {{ tex \mathbin{:\leqslant} }}
  | :≈ :: :: solEq     {{ tex \mathbin{:\simeq} }}
  | Λ    :: :: bigLam    {{ tex \Lambda }}
  | λ    :: :: lam       {{ tex \lambda }}
  | let∃ :: :: letExists {{ tex \ottkw{let}^{\exists} }}
  | ●    :: :: bullet    {{ tex \bullet }}
  | ⇒>   :: :: spinInf   {{ tex \Rightarrow \hspace{-3pt} > }}
  | <=<  :: :: compM     {{ tex \mathord{< \hspace{-5.3pt} = \hspace{-4.2pt} <} }}
  | &    :: :: ampersand {{ tex \mathbin{\&} }}
  | ▷    :: :: triangle {{ tex \triangleright }}





funs
  LUBF ::=
fun
  iP1 ∨ iP2 :: iQ :: LUB 
by

fun ord varset in uP :: ordVars :: uP by
fun ord varset in uN :: ordVars :: uN by
fun ord varset in iP :: ordVars :: N by
fun ord varset in iN :: ordVars :: P by

fun nf ( iN' )  :: iN :: NNf by
fun nf ( iP' )  :: iP :: PNf by
fun nf ( uN' )  :: uN :: uNNf by
fun nf ( uP' )  :: uP :: uPNf by
fun nf ( iNs' ) :: iNs :: uNsNf by
fun nf ( iPs' ) :: iPs :: uPsNf by
fun nf ( σ' )   :: σ :: SubNf by
fun nf ( uσ' )   :: uσ :: USubNf by
fun nf ( μ' )   :: μ :: Movnf by

fun σ'   | varset :: σ :: Restr {{ tex [[σ']]|_{[[varset]]} }} by 
fun uσ'  | varset :: uσ :: USRestr {{ tex [[uσ']]|_{[[varset]]} }} by 
fun aus' | varset :: aus :: AURestr {{ tex [[aus']]|_{[[varset]]} }} by
fun Xi'  | varset :: Xi :: XiRestr {{ tex [[Xi']]|_{[[varset]]} }} by
fun SC'  | varset :: SC :: SCRestr {{ tex [[SC']]|_{[[varset]]} }} by
fun UC'  | varset :: UC :: UCRestr {{ tex [[UC']]|_{[[varset]]} }} by

fun
   ucE1 & ucE2 :: ucE :: UCEM {{ tex [[ucE1]] ~ \& ~ [[ucE2]] }}
by

fun
   scE1 & scE2 :: scE :: SCEM {{ tex [[scE1]] ~ \& ~ [[scE2]] }}
by


fun
   UC1 & UC2 :: UC :: UCM {{ tex [[UC1]] ~ \& ~[[UC2]] }}
by

fun 
   UC1 ∪ UC2 :: UC :: UCUnion {{ tex [[UC1]] \cup [[UC2]] }}
by 

fun
   Γ1 ∪ Γ2 :: Γ :: CtxtUnion {{ tex [[Γ1]] \cup [[Γ2]] }}
by

fun
   SC1 & SC2 :: SC :: SCM {{ tex [[SC1]] ~ \& ~[[SC2]] }}
by

fun 
  aus1 & aus2 :: aus :: AUMRG {{ tex [[aus1]] ~ \& ~[[aus2]] }}
by

fun dom ( UC )  :: Ξ :: UCDom by
fun dom ( SC )  :: Ξ :: SCDom by
fun dom ( uσ )  :: Ξ :: uSubDom by
fun dom ( aus ) :: Ξ :: ausolDom by
fun dom ( Θ )   :: Ξ :: uCtxtDomXi by

fun Θ ( pua ) :: Γ :: thetaLookupP  by
fun Θ ( nua ) :: Γ :: thetaLookupN  by



fun | SC | :: UC :: SCFlatten by

fun fv uN :: Γ :: uNfv by
fun fv uP :: Γ :: uPfv by
fun fv iP :: Γ :: Pfv by
fun fv iN :: Γ :: Nfv by

fun uv uN :: Ξ :: uNuv {{ tex \ottkw{fav} [[uN]] }} by 
fun uv uP :: Ξ :: uPuv {{ tex \ottkw{fav} [[uP]] }} by 

fun bv iN :: Γ :: Pbv {{ tex \ottkw{fbv} [[iN]] }} by 

fun | iP |  :: fT :: unpolP {{ tex | [[iP]] | }} by 
   |α⁺| === a
   |↓iN| === |iN|
   |∃nas.iP| === ∃as.|iP|
fun | iN | :: fT :: unpolN {{ tex | [[iN]] | }} by 
   |α⁻| === a
   |↑iP| === |iP|
   |∀α⁺.iN| === ∀α.|iN|
   |iP → iN| === |iP| → |iN|

fun | Γ | :: fΓ :: unpolCtxt {{ tex | [[Γ]] | }} by 


fun +| fT |+  :: iP :: polarP {{ tex \downharpoonlefttight [[fT]] \downharpoonrighttight }} by 
   +|a|+       === α⁺ 
   +|∀a.fT|+   === ↓( ∀α⁺.↑+|fT|+ )
   +|fA → fB|+ === ↓( +|fA|+ → ↑+|fB|+ )


fun +| fΓ |+  :: Γ :: polarCtxt {{ tex \downharpoonlefttight [[fΓ]] \downharpoonrighttight }} by 
   +| · |+     === ·
   +| a, fΓ |+ === {α⁺} , +|fΓ|+ 

fun ∃ as . fT'  :: fT :: existsSugar by 
   ∃ as . fT' === ∀b.(∀as.(fT' → b)) → b

fun +| fT |+ ^ Γ  :: iP :: pPwC {{ tex \downharpoonlefttight [[fT]] \downharpoonrighttight^{[[Γ]]} }} by 
   +|a|+^Γ       === α⁺

fun -| fT |- ^ Γ :: iN ::  pNwC {{ tex \upharpoonlefttight [[fT]] \upharpoonrighttight^{[[Γ]]} }} by
   -|a|-^Γ       === α⁻
