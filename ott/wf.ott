defns
  WFT :: 'WFT' ::=

  defn Γ ⊢ iN  :: :: NiWF :: '' {{ com Negative type well-formedness }} by

    α⁻ ∊ Γ
    --------- :: NVar
    Γ ⊢ α⁻ 

    Γ ⊢ iP
    -------- :: ShiftU
    Γ ⊢ ↑iP

    Γ ⊢ iP    Γ ⊢ iN
    ----------------- :: Arrow
    Γ ⊢ iP → iN

    Γ, {pas} ⊢ iN
    ------------ :: Forall
    Γ ⊢ ∀pas.iN

  defn Γ ⊢ iP  :: :: PiWF :: '' {{ com Positive type well-formedness }} by

    α⁺ ∊ Γ
    -------- :: PVar
    Γ ⊢ α⁺

    Γ ⊢ iN
    -------- :: ShiftD
    Γ ⊢ ↓iN

    Γ, nas ⊢ iP
    ----------- :: Exists
    Γ ⊢ ∃nas.iP

defns
  WFAT :: 'WFAT' ::=


  defn Γ ; Ξ ⊢ uN  :: :: NauWF :: '' {{ com Negative algorithmic type well-formedness }} by

    α⁻ ∊ Γ
    --------- :: NVar
    Γ; Ξ ⊢ α⁻ 

    α̂⁻ ∊ Ξ
    ----------- :: NUVar
    Γ; Ξ ⊢ α̂⁻

    Γ; Ξ ⊢ uP
    --------- :: ShiftU
    Γ; Ξ ⊢ ↑uP

    Γ; Ξ ⊢ uP    Γ; Ξ ⊢ uN
    ----------------------- :: Arrow
    Γ; Ξ ⊢ uP → uN

    Γ, pas; Ξ ⊢ uN
    ------------ :: Forall
    Γ; Ξ ⊢ ∀pas.uN

  defn Γ ; Ξ ⊢ uP  :: :: PauWF :: '' {{ com Positive algorithmic type well-formedness }} by

    α⁺ ∊ Γ
    --------- :: PVar
    Γ; Ξ ⊢ α⁺

    α̂⁺ ∊ Ξ
    ---------- :: PUVar
    Γ; Ξ ⊢ α̂⁺

    Γ; Ξ ⊢ uN
    ----------- :: ShiftD
    Γ; Ξ ⊢ ↓uN

    Γ, nas; Ξ ⊢ uP
    --------------- :: Exists
    Γ; Ξ ⊢ ∃nas.uP


defns
  WFALL :: 'WFALL' ::=

  defn Γ ⊢ iNs  :: :: NisWF :: '' {{ com Negative type list well-formedness }} by
  defn Γ ⊢ iPs  :: :: PisWF :: '' {{ com Positive type list well-formedness }} by


  defn  Γ ; Ξ2 ⊢ aus : Ξ1 :: :: AUSWF :: '' {{ com Antiunification substitution well-formedness }} by
  % defn  us : Θ :: :: USWF :: '' {{ com Unification substitution well-formedness }} by
  defn  Γ ⊢ Θ :: :: UCtxtWF :: '' {{ com Unification context well-formedness }} 
                                  {{ tex [[Γ]] \vdash^{\supseteq}[[Θ]] }} by

  defn  Γ1 ⊢ σ : Γ2 :: :: SWF :: '' {{ com Substitution signature}} by
  defn  Θ ⊢ uσ : Ξ :: :: USWF :: '' {{ com Unification substitution signature }} by
  defn  Γ ⊢ uσ : Ξ :: :: USWFG :: '' {{ com Unification substitution general signature }} by
  defn  Θ ⊢ uσ : UC :: :: USUCWF :: '' {{ com Unification substitution satisfies unification constraint }} by
  defn  Θ ⊢ uσ : SC :: :: USSCWF :: '' {{ com Unification substitution satisfies subtyping constraint }} by


  defn Γ ⊢ ucE :: :: UEWF :: '' {{ com Unification constraint entry well-formedness }}  by
  defn Γ ⊢ scE :: :: SEWF :: '' {{ com Subtyping constraint entry well-formedness }}  by

  defn  Γ ⊢ iP : ucE :: :: PUCWF :: '' {{ com Positive type satisfies unification constraint }} by
  defn Γ ⊢ iN : ucE :: :: NUCWF :: '' {{ com Negative type satisfies unification constraint }} by

  defn Γ ⊢ iP : scE  :: :: PSCWF :: '' {{ com Positive type satisfies subtyping constraint }} by
  defn Γ ⊢ iN : scE :: :: NSCWF :: '' {{ com Negative type satisfies subtyping constraint }} by

  defn Θ ⊢ UC : Ξ :: :: UCWFSp :: '' {{ com Unification constraint well-formedness with specified domain }} by
  defn Θ ⊢ SC : Ξ :: :: SCWFSp :: '' {{ com Subtyping constraint well-formedness with specified domain }} by

  defn Θ ⊢ UC :: :: UCWF :: '' {{ com Unification constraint well-formedness }} by
  defn Θ ⊢ SC :: :: SCWF :: '' {{ com Subtyping constraint well-formedness }} by

  defn Γ ⊢ args :: :: ArgsWF :: '' {{ com Argument List well-formedness }} by

  defn Γ ⊢ Φ :: :: CtxtWF :: '' {{ com Context well-formedness }} by
  defn Γ ⊢ v :: :: ValWF :: '' {{ com Value well-formedness }} by

    ----- :: Var
    Γ ⊢ x

  defn Γ ⊢ c :: :: ComWF :: '' {{ com Computation well-formedness }} by

    Γ ⊢ v    Γ ⊢ c     Γ ⊢ args
    ------------------------------ :: AppLet
    Γ ⊢ let x = v(args); c