defns
  AT :: 'AT' ::=

  defn Γ ; Φ ⊨ v : iP :: :: PInf :: ''
  {{ com Positive type inference }}
  {{ tex [[Γ]] ; [[Φ]] \vDash [[v]] \colon [[iP]] }} by 

  x : iP ∊ Φ
  ------------------ :: Var
  Γ; Φ ⊨ x : nf(iP)

  Γ; Φ ⊨ c : iN
  ------------------- :: Thunk
  Γ; Φ ⊨ {c} : ↓iN

  Γ ⊢ iQ     Γ; Φ ⊨ v : iP    Γ ; · ⊨ uQ ≥ iP ⫤ · 
  ----------------------------------------------- :: PAnnot
  Γ; Φ ⊨ (v : iQ) : nf(iQ)

  defn Γ ; Φ ⊨ c : iN :: :: NInf :: ''
  {{ com Negative type inference }}
  {{ tex [[Γ]] ; [[Φ]] \vDash [[c]] \colon [[iN]] }} by

  Γ ⊢ iM    Γ ; Φ ⊨ c : iN    Γ ; · ⊨ uN ≤ iM ⫤ ·
  ----------------------------------------------- :: NAnnot
  Γ ; Φ ⊨ (c : iM) : nf(iM)

  Γ ⊢ iP          Γ; Φ, x:iP ⊨ c : iN 
  ----------------------------------- :: tLam
  Γ; Φ ⊨ λx:iP . c : nf(iP → iN)

  Γ, α⁺ ; Φ ⊨ c : iN
  --------------------------- :: TLam
  Γ; Φ ⊨ Λα⁺ . c : nf(∀α⁺.iN)

  Γ; Φ ⊨ v : iP
  ----------------------- :: Return
  Γ; Φ ⊨ return v : ↑iP

  Γ; Φ ⊨ v : iP    Γ; Φ, x:iP ⊨ c : iN
  ------------------------------------- :: VarLet
  Γ; Φ ⊨ let x = v; c : iN


  Γ ⊢ iP   Γ; Φ ⊨ v : ↓iM   
  Γ; Φ; · ⊨ uM ● args ⇒> ↑uQ ⫤ Θ; SC1   Γ; Θ ⊨ ↑uQ ≤ ↑iP ⫤ SC2   
  Θ ⊢ SC1 & SC2 = SC    Γ; Φ, x:iP ⊨ c : iN
  -------------------------------------------------------------- :: AppLetAnn
  Γ; Φ ⊨ let x:iP = v(args); c : iN

  Γ; Φ ⊨ v : ↓iM   Γ; Φ ; · ⊨ uM ● args ⇒> ↑uQ ⫤ Θ; SC   
  uv uQ = dom(SC)    SC singular with uσ 
  Γ; Φ, x:[uσ]uQ ⊨ c : iN
  --------------------------------------------------------------- :: AppLet
  Γ; Φ ⊨ let x = v(args); c : iN


  Γ; Φ ⊨ v : ∃nas.iP   Γ, nas ; Φ, x:iP ⊨ c : iN   Γ ⊢ iN
  -------------------------------------------------------- :: Unpack
  Γ; Φ ⊨ let∃ (nas, x) = v; c : iN


defn Γ ; Φ ; Θ1 ⊨ uN ● args ⇒> uM ⫤ Θ2 ; SC :: :: SpinInf :: ''
{{ com Application type inference }} by

---------------------------------- :: EmptyApp
Γ; Φ; Θ ⊨ uN ● · ⇒> nf(uN) ⫤ Θ; ·

Γ; Φ ⊨ v : iP   Γ; Θ ⊨ uQ ≥ iP ⫤ SC1   Γ; Φ; Θ ⊨ uN ● args ⇒> uM ⫤ Θ'; SC2
Θ ⊢ SC1 & SC2 = SC
--------------------------------------------------------------------------- :: ArrowApp
Γ; Φ; Θ ⊨ uQ → uN ● v , args ⇒> uM ⫤ Θ'; SC

Γ; Φ; Θ, â⁺*[Γ] ⊨ [â⁺*/pas]uN ● args ⇒> uM ⫤ Θ'; SC
{â⁺*} are fresh    args ≠ ·      pas ≠ ·
---------------------------------------------------------- :: ForallApp
Γ; Φ; Θ ⊨ ∀pas.uN ● args ⇒> uM ⫤ Θ'; SC | uv(uN) ∪ uv(uM)
