defns
  AT :: 'AT' ::=

  defn Γ ; Φ ⊨ v : iP :: :: PInf :: ''
  {{ com Positive type inference }}
  {{ tex [[Γ]] ; [[Φ]] \vDash [[v]] \colon [[iP]] }} by 

  v : iP ∊ Φ
  --------------- :: Var
  Γ; Φ ⊨ v : iP

  Γ; Φ ⊨ c : iN
  ------------------- :: Thunk
  Γ; Φ ⊨ {c} : ↓iN

  Γ; Φ ⊨ v : iP    Γ ; · ⊨ uQ ≥ iP ⫤ · 
  --------------------------------------- :: Annot
  Γ; Φ ⊨ (v : iQ) : iQ

  defn Γ ; Φ ⊨ c : iN :: :: NInf :: ''
  {{ com Negative type inference }}
  {{ tex [[Γ]] ; [[Φ]] \vDash [[c]] \colon [[iN]] }} by

  Γ ; Φ ⊨ c : iN    Γ ; · ⊨ uN ≤ iM ⫤ ·
  -------------------------------------- :: AnnotN
  Γ ; Φ ⊨ (c : iM) : iM

  Γ; Φ, x:iP ⊨ c : iN 
  ---------------------------- :: tLam
  Γ; Φ ⊨ λx:iP . c : iP → iN

  Γ, α⁺ ; Φ ⊨ c : iN
  ------------------------- :: TLam
  Γ; Φ ⊨ Λα⁺ . c : ∀α⁺.iN

  Γ; Φ ⊨ v : iP
  ----------------------- :: Return
  Γ; Φ ⊨ return v : ↑iP

  Γ; Φ ⊨ v : ↓iM   Γ ; Φ ; · ⊨ uM ● args ⇒> ↑uQ ⫤ us1   Γ; Ord uv uQ [ Γ ] ⊨ ↑uQ ≤ ↑iP ⫤ us2   
  Ord uv uQ [ Γ ] ⊢ us1 & us2 = us    Γ; Φ, x:iP ⊨ c : iN
  -------------------------------------------------------------------------------------------------------------------- :: LetAnn
  Γ; Φ ⊨ let x:iP = v(args); c : iN

  Γ; Φ ⊨ v : ↓iM   Γ ; Φ ; · ⊨ uM ● args ⇒> ↑uQ ⫤ us   uv(uQ) = ∅     Γ; Φ, x:iQ ⊨ c : iN
  ----------------------------------------------------------------------------------------- :: Let
  Γ; Φ ⊨ let x = v(args); c : iN

  Γ, α⁻ ; Φ ⊨ v : ∃α⁻.iP   Γ, α⁻ ; Φ, x:iP ⊨ c : iN   Γ ⊢ iN
  ----------------------------------------------------------- :: Unpack
  Γ; Φ ⊨ let∃ (α⁻, x) = v; c : iN


defn Γ ; Φ ; Θ ⊨ uN ● args ⇒> uM ⫤ us :: :: SpinInf :: ''
{{ com Application type inference }} by

uN ≠ ∀pas.uM
-------------------------- :: Emtpty
Γ; Φ; Θ ⊨ uN ● · ⇒> uN ⫤ ·

Γ; Φ ⊨ v : iP   Γ; Θ ⊨ uQ ≥ iP ⫤ us1   Γ; Φ; Θ ⊨ uN ● args ⇒> uM ⫤ us2
----------------------------------------------------------------------- :: Arrow
Γ; Φ; Θ ⊨ uQ → uN ● v , args ⇒> uM ⫤ us1 & us2


Γ; Φ; Θ, â⁺*[Γ] ⊨ [â⁺*/pas]uN ● args ⇒> uM ⫤ us
-------------------------------------------- :: Forall
Γ; Φ; Θ ⊨ ∀pas.uN ● args ⇒> uM ⫤ us

