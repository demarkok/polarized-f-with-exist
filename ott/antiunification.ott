defns
  AU :: 'AU' ::=
  defn G ⊨ iP1 ≈au iP2 ⫤ ( Ξ , uQ , aus1 , aus2 )  :: :: AUP :: 'P' by

  -------------------------- :: Var
  G ⊨ pa ≈au pa ⫤ (·, pa, ·, ·)

  G ⊨ iN1 ≈au iN2 ⫤ (Ξ, uM, aus1, aus2)
  ---------------------------------------- :: Shift
  G ⊨ ↓iN1 ≈au ↓iN2 ⫤ (Ξ, ↓uM, aus1, aus2)

  {nas} ∩ {G} = ∅    G ⊨ iP1 ≈au iP2 ⫤ (Ξ, uQ, aus1, aus2)
  -------------------------------------------------------- :: Exists
  G ⊨ ∃nas.iP1 ≈au ∃nas.iP2 ⫤ (Ξ, ∃nas.uQ, aus1, aus2)

  defn G ⊨ iN1 ≈au iN2 ⫤ ( Ξ ,  uM , aus1 , aus2 )  :: :: AUN :: 'N' by

  ---------------------- :: Var
  G ⊨ na ≈au na ⫤ (Ξ, na, ·, ·)

  G ⊨ iP1 ≈au iP2 ⫤ (Ξ, uQ, aus1, aus2)
  ---------------------------------------- :: Shift
  G ⊨ ↑iP1 ≈au ↑iP2 ⫤ (Ξ, ↑uQ, aus1, aus2)

  G ⊨ iP1 ≈au iP2 ⫤ (Ξ1, uQ, aus1, aus2)    G ⊨ iN1 ≈au iN2 ⫤ (Ξ2, uM, aus'1, aus'2)
  ----------------------------------------------------------------------------------  :: Arrow
  G ⊨ iP1 → iN1 ≈au iP2 → iN2 ⫤ (Ξ1 ∪ Ξ2, uQ → uM, aus1 ∪ aus'1, aus2 ∪ aus'2)

  otherwise   G ⊢ iN     G ⊢ iM 
  --------------------------------------------------------------------------------------------  :: AU
  G ⊨ iN ≈au iM ⫤ (â⁻_{iN, iM}, â⁻_{iN, iM}, (â⁻_{iN, iM} :≈ iN) ,  (â⁻_{iN, iM} :≈ iM))