metavar x, y, z ::= {{ com term variables }}


grammar

v, w :: 'v_' ::= {{ com value terms }}
  | x          ::   :: Var
  | { c }      ::   :: Thunk
  | ( v : iP ) ::   :: PAnnot
  | ( v )      :: M :: Paren

args {{ tex \vv{ v } }} :: 'args_' ::= {{ com list of arguments }}
    | ·                     ::   :: Empty
    | v                     ::   :: Single
    | </ argsi // , // i /> ::   :: Concat  {{ com concatenate }}

c, d :: 'c_' ::= {{ com computation terms }}
  | ( c : iN )                    ::   :: NAnnot
  | λ x : iP . c                  ::   :: Lam    
  | Λ pa . c                      ::   :: BigLam 
  | return v                      ::   :: Return
  | let x = v ; c                 ::   :: VarLet 
  | let x : iP = v ( args ) ; c   ::   :: AppLetAnn 
  | let x     = v ( args ) ; c    ::   :: AppLet   
  | let∃ ( na , x ) = v    ; c    ::   :: Unpack 

vctx, Φ {{ tex \Phi }} :: 'vctxt_' ::= {{ com variable context }}
  | ·                     ::   :: Empty
  | x : iP                ::   :: Single
  | </ Φi // , // i />    ::   :: Concat  {{ com concatenate contexts }}

