defns
  DT :: 'DT' ::=

  defn Γ ; Φ ⊢ v : iP :: :: PInf :: ''
  {{ com Positive typing }}
  {{ tex [[Γ]] ; [[Φ]] \vdash [[v]] \colon [[iP]] }} by 

  x : iP ∊ Φ   
  --------------- :: Var
  Γ ; Φ ⊢ x : iP

  Γ ; Φ ⊢ c : iN
  ------------------- :: Thunk
  Γ ; Φ ⊢ {c} : ↓iN

  Γ⊢ iQ   Γ ; Φ ⊢ v : iP    Γ ⊢ iQ ≥ iP
  ---------------------------------------- :: PAnnot
  Γ ; Φ ⊢ (v : iQ) : iQ

  Γ ; Φ ⊢ v : iP      Γ ⊢ iP ≈ iP'
  -------------------------------- :: PEquiv
  Γ ; Φ ⊢ v : iP'

  defn Γ ; Φ ⊢ c : iN :: :: NInf :: ''
  {{ com Negative typing }}
  {{ tex [[Γ]] ; [[Φ]] \vdash [[c]] \colon [[iN]] }} by

  Γ ⊢ iP    Γ ; Φ, x:iP ⊢ c : iN 
  ------------------------------- :: tLam
  Γ ; Φ ⊢ λx:iP . c : iP → iN

  Γ, α⁺ ; Φ ⊢ c : iN
  ------------------------- :: TLam
  Γ ; Φ ⊢ Λα⁺ . c : ∀α⁺.iN

  Γ ; Φ ⊢ v : iP
  ----------------------- :: Return
  Γ ; Φ ⊢ return v : ↑iP

  Γ; Φ ⊢ v : iP    Γ; Φ, x:iP ⊢ c : iN
  ------------------------------------- :: VarLet
  Γ; Φ ⊢ let x = v; c : iN

  Γ ; Φ ⊢ v : ↓iM   
  Γ ; Φ ⊢ iM ● args ⇒> ↑iQ principal   
  Γ; Φ, x:iQ ⊢ c : iN
  ---------------------------------- :: AppLet
  Γ ; Φ ⊢ let x = v(args); c : iN

  Γ ⊢ iP   Γ ; Φ ⊢ v : ↓iM   
  Γ ; Φ ⊢ iM ● args ⇒> ↑iQ   
  Γ ⊢ ↑iQ ≤ ↑iP   Γ; Φ, x:iP ⊢ c : iN
  ----------------------------------------------------- :: AppLetAnn
  Γ ; Φ ⊢ let x:iP = v(args); c : iN

  Γ ; Φ ⊢ v : ∃nas.iP     
  nf(∃nas.iP) = ∃nas.iP
  Γ, nas ; Φ, x:iP ⊢ c : iN   Γ ⊢ iN
  ---------------------------------------------- :: Unpack
  Γ ; Φ ⊢ let∃ (nas, x) = v; c : iN

  Γ ⊢ iM    Γ ; Φ ⊢ c : iN    Γ ⊢ iN ≤ iM
  ---------------------------------------- :: NAnnot
  Γ ; Φ ⊢ (c : iM) : iM

  Γ ; Φ ⊢ c : iN   Γ ⊢ iN ≈ iN'
  ------------------------------ :: NEquiv
  Γ ; Φ ⊢ c : iN'

  defn Γ ; Φ ⊢ c : iN :: :: NInfExtra :: ''
  {{ com Negative typing }}
  {{ tex [[Γ]] ; [[Φ]] \vdash [[c]] \colon [[iN]] }} by

  Γ ; Φ ⊢ c : ∀pas.iN 
  -------------------------------- :: TypeApp
  Γ ; Φ ⊢ c [ iPs ] : [iPs/pas]iN


  Γ ; Φ ⊢ c : ∀pas.iN  nf(∀pas.iN) = ∀pas.iN
  ------------------------------------------ :: TypeAppOrdered
  Γ ; Φ ⊢ c [ iPs ] : [iPs/pas]iN


  Γ ; Φ ⊢ c : ∀ (li ▷* αi⁺)^I . iN  
  ------------------------------------------ :: TypeAppLb
  Γ ; Φ ⊢ c [ lj ▷ iP ] : ∀ (li ▷* αi⁺)^I\{jj}.[iP/αj⁺]iN

  Γ, α⁺ ; Φ ⊢ c : iN
  ------------------------- :: TLamLb
  Γ ; Φ ⊢ Λl▷α⁺ . c : ∀l▷α⁺.iN

  defn Γ ; Φ ⊢ c ⇒ iN :: :: NSynth :: ''
  {{ com Negative synthesizing-only }} by

  Γ ⊢ iP    Γ ; Φ, x:iP ⊢ c ⇒ iN 
  ------------------------------- :: tLamSyn
  Γ ; Φ ⊢ λx:iP . c ⇒ iP → iN

  Γ, α⁺ ; Φ ⊢ c ⇒ iN
  ------------------------- :: TLamSyn
  Γ ; Φ ⊢ Λα⁺ . c ⇒ ∀α⁺.iN

  Γ ⊢ iM    Γ ; Φ ⊢ c ⇐ iM
  ------------------------- :: NAnnotSyn
  Γ ; Φ ⊢ (c : iM) ⇒ iM


  defn Γ ; Φ ⊢ c ⇐ iN :: :: NCheck :: ''
  {{ com Negative checking-only }} by

  Γ ⊢ iP    Γ ; Φ, x:iP ⊢ c ⇐ iN 
  ------------------------------- :: tLamChk
  Γ ; Φ ⊢ λx . c ⇐ iP → iN

  Γ ; Φ ⊢ c ⇒ iN    Γ ⊢ iN ≤ iM
  ------------------------------- :: NSub
  Γ ; Φ ⊢ c ⇐ iM
    
  defn Γ ; Φ ⊢ c ⇔ iN :: :: NCheckSynth :: ''
  {{ com Negative checking and synthesizing }} by

  Γ ; Φ ⊢ v ⇔ iP
  ----------------------- :: ReturnChkSyn
  Γ ; Φ ⊢ return v ⇔ ↑iP

  Γ; Φ ⊢ v ⇒ iP    Γ; Φ, x:iP ⊢ c ⇔ iN
  ------------------------------------- :: VarLetChkSyn
  Γ; Φ ⊢ let x = v; c ⇔ iN


  Γ ; Φ ⊢ v ⇒ ↓iM   
  Γ ; Φ ⊢ iM ● args ⇒> ↑iQ principal   
  Γ; Φ, x:iQ ⊢ c ⇔ iN
  ---------------------------------- :: AppLetChkSyn
  Γ ; Φ ⊢ let x = v(args); c ⇔ iN


  Γ ⊢ iP   Γ ; Φ ⊢ v ⇒ ↓iM   
  Γ ; Φ ⊢ iM ● args ⇒> ↑iQ   
  Γ ⊢ ↑iQ ≤ ↑iP   Γ; Φ, x:iP ⊢ c ⇔ iN
  -------------------------------------- :: AppLetAnnChkSyn
  Γ ; Φ ⊢ let x:iP = v(args); c ⇔ iN


  Γ ⊢ iN
  Γ ; Φ ⊢ v ⇒ ∃nas.iP   nf(∃nas.iP) = ∃nas.iP
  Γ, nas ; Φ, x:iP ⊢ c ⇔ iN  
  ------------------------------------- :: UnpackChkSyn
  Γ ; Φ ⊢ let∃ (nas, x) = v; c ⇔ iN

  Γ ; Φ ⊢ c ⇔ iM   Γ ⊢ iM ≈ iN
  -------------------------- :: NEquivChkSyn
  Γ ; Φ ⊢ c ⇔ iN


  defn Γ ; Φ ⊢ v ⇐ iP :: :: PCheck :: ''
  {{ com Positive checking-only }} by

  Γ ; Φ ⊢ v ⇒ iP    Γ ⊢ iQ ≥ iP
  ------------------------------ :: PSub
  Γ ; Φ ⊢ v ⇐ iQ


  defn Γ ; Φ ⊢ v ⇒ iP :: :: PSynth :: ''
  {{ com Positive synthesis-only }} by

  x : iP ∊ Φ   
  --------------- :: VarSyn
  Γ ; Φ ⊢ x ⇒ iP

  Γ⊢ iQ   Γ ; Φ ⊢ v ⇐ iQ
  ----------------------- :: PAnnotSyn
  Γ ; Φ ⊢ (v : iQ) ⇒ iQ

  defn Γ ; Φ ⊢ v ⇔ iP :: :: PCheckSynth :: ''
  {{ com Positive checking and synthesis }} by

  Γ ; Φ ⊢ c ⇔ iN
  ------------------- :: ThunkChkSyn
  Γ ; Φ ⊢ {c} ⇔ ↓iN

  Γ ; Φ ⊢ v ⇔ iQ   Γ ⊢ iQ ≈ iP
  -------------------------- :: PEquivChkSyn
  Γ ; Φ ⊢ v ⇔ iP



defn Γ ; Φ ⊢ iN ● args ⇒> iM :: :: SpinInf :: ''
{{ com Application typing }} by

Γ ⊢ iN ≈ iN'
---------------------- :: EmptyApp
Γ ; Φ ⊢ iN ● · ⇒> iN' 

Γ ; Φ ⊢ v : iP   Γ ⊢ iQ ≥ iP  
Γ ; Φ ⊢ iN ● args ⇒> iM
-------------------------------- :: ArrowApp
Γ ; Φ ⊢ iQ → iN ● v , args ⇒> iM

args ≠ ·           pas ≠ ·   Γ ⊢ σ : {pas}      
Γ ; Φ ⊢ [σ]iN ● args ⇒> iM
------------------------------------------------ :: ForallApp
Γ ; Φ ⊢ ∀pas.iN ● args ⇒> iM


defn Γ ; Φ ⊢ iN ● args ⇒> iM :: :: SpinInfBidir :: ''
{{ com Application typing }} by

Γ ⊢ iN ≈ iN'
---------------------- :: EmptyAppBidir
Γ ; Φ ⊢ iN ● · ⇒> iN' 

Γ ; Φ ⊢ v ⇒ iP   Γ ⊢ iQ ≥ iP  
Γ ; Φ ⊢ iN ● args ⇒> iM
-------------------------------- :: ArrowAppBidir
Γ ; Φ ⊢ iQ → iN ● v , args ⇒> iM

args ≠ ·           pas ≠ ·   Γ ⊢ σ : {pas}      
Γ ; Φ ⊢ [σ]iN ● args ⇒> iM
------------------------------------------------ :: ForallAppBidir
Γ ; Φ ⊢ ∀pas.iN ● args ⇒> iM








