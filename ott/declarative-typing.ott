defns
  DT :: 'DT' ::=

  defn Γ ; Φ ⊢ v : iP :: :: PInf :: ''
  {{ com Positive typing }}
  {{ tex [[Γ]] ; [[Φ]] \vdash [[v]] \colon [[iP]] }} by 

  x : iP ∊ Φ   
  --------------- :: Var
  Γ ; Φ ⊢ x : iP

  Γ ; Φ ⊢ c : iN
  ------------------- :: Thunk
  Γ ; Φ ⊢ {c} : ↓iN

  Γ⊢ iQ   Γ ; Φ ⊢ v : iP    Γ ⊢ iQ ≥ iP
  ---------------------------------------- :: PAnnot
  Γ ; Φ ⊢ (v : iQ) : iQ

  Γ ; Φ ⊢ v : iP      Γ ⊢ iP ≈ iP'
  -------------------------------- :: PEquiv
  Γ ; Φ ⊢ v : iP'

  defn Γ ; Φ ⊢ c : iN :: :: NInf :: ''
  {{ com Negative typing }}
  {{ tex [[Γ]] ; [[Φ]] \vdash [[c]] \colon [[iN]] }} by

  Γ ⊢ iP    Γ ; Φ, x:iP ⊢ c : iN 
  ------------------------------- :: tLam
  Γ ; Φ ⊢ λx:iP . c : iP → iN

  Γ, α⁺ ; Φ ⊢ c : iN
  ------------------------- :: TLam
  Γ ; Φ ⊢ Λα⁺ . c : ∀α⁺.iN

  Γ ; Φ ⊢ v : iP
  ----------------------- :: Return
  Γ ; Φ ⊢ return v : ↑iP

  Γ; Φ ⊢ v : iP    Γ; Φ, x:iP ⊢ c : iN
  ------------------------------------- :: VarLet
  Γ; Φ ⊢ let x = v; c : iN

  Γ ; Φ ⊢ v : ↓iM   
  Γ ; Φ ⊢ iM ● args ⇒> ↑iQ uniq   
  Γ; Φ, x:iQ ⊢ c : iN
  ---------------------------------- :: AppLet
  Γ ; Φ ⊢ let x = v(args); c : iN

  Γ ⊢ iP   Γ ; Φ ⊢ v : ↓iM   
  Γ ; Φ ⊢ iM ● args ⇒> ↑iQ   
  Γ ⊢ ↑iQ ≤ ↑iP   Γ; Φ, x:iP ⊢ c : iN
  ----------------------------------------------------- :: AppLetAnn
  Γ ; Φ ⊢ let x:iP = v(args); c : iN

  Γ ; Φ ⊢ v : ∃nas.iP     
  nf(∃nas.iP) = ∃nas.iP
  Γ, nas ; Φ, x:iP ⊢ c : iN   Γ ⊢ iN
  ---------------------------------------------- :: Unpack
  Γ ; Φ ⊢ let∃ (nas, x) = v; c : iN

  Γ ⊢ iM    Γ ; Φ ⊢ c : iN    Γ ⊢ iN ≤ iM
  ---------------------------------------- :: NAnnot
  Γ ; Φ ⊢ (c : iM) : iM

  Γ ; Φ ⊢ c : iN   Γ ⊢ iN ≈ iN'
  ------------------------------ :: NEquiv
  Γ ; Φ ⊢ c : iN'

defn Γ ; Φ ⊢ iN ● args ⇒> iM :: :: SpinInf :: ''
{{ com Application typing }} by

Γ ⊢ iN ≈ iN'
---------------------- :: EmptyApp
Γ ; Φ ⊢ iN ● · ⇒> iN' 

Γ ; Φ ⊢ v : iP   Γ ⊢ iQ ≥ iP  
Γ ; Φ ⊢ iN ● args ⇒> iM
-------------------------------- :: ArrowApp
Γ ; Φ ⊢ iQ → iN ● v , args ⇒> iM

args ≠ ·           pas ≠ ·   Γ ⊢ σ : {pas}      
Γ ; Φ ⊢ [σ]iN ● args ⇒> iM
------------------------------------------------ :: ForallApp
Γ ; Φ ⊢ ∀pas.iN ● args ⇒> iM